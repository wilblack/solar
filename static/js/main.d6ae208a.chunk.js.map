{"version":3,"sources":["types.ts","services/api-service.ts","services/attribute-map.ts","services/body.service.ts","components/home/Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LOCALSTORAGE_KEY","AttrType","api","baseUrl","get","url","queryParams","a","urlWithParams","stringify","console","log","axios","getOrCached","localStorageKey","localString","localStorage","getItem","localResults","JSON","parse","Promise","resolve","reject","results","setItem","data","bodies","fetchPlanets","excludedAttributes","filter","exclude","join","API_PLANETS","fetchEnglishNames","API_ENGLISH_NAMES","attrMap","attribute","columnName","type","STRING","weight","LIST","NUMBERIC","bodyService","ALL_ATTRIBUTES","findClosestObject","planet","getDataframe","df","index","getRandomInt","length","comuteSimilarity","str","CLEANED_DF","buildDataframe","buildExcludedAttributes","gameAttrs","map","v","concat","attr","indexOf","buildCleanEnglishLexicon","englishLexicon","cleanMoons","cleanAllFields","warn","rawNames","cleanedNames","raw","id","name","cleanName","rawEnglishName","cleanedName","replace","min","max","Math","ceil","floor","random","theme","createTheme","Home","useState","setplanets","setPlanetOptions","closestMatch","setClosestMatch","useEffect","getData","subscribe","planetOptions","p","i","label","englishName","value","samplePlanet","Date","handleSubmit","event","preventDefault","FormData","currentTarget","closestPlanet","ThemeProvider","Container","component","maxWidth","Typography","variant","Box","noValidate","onSubmit","sx","mt","Grid","container","spacing","item","xs","sm","TextField","fullWidth","Button","mb","Root","path","element","App","className","basename","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d6ae208a.chunk.js","sourcesContent":["\nexport enum LOCALSTORAGE_KEY {\n    API_PLANETS = \"apiPlanets\",\n    API_ENGLISH_NAMES = \"apiEnglishNames\",\n    CLEANED_DF = \"cleanedDf\"\n}\n\n\nexport interface Body {\n    alternativeName: string\n    aphelion: number\n    argPeriapsis: number\n    aroundPlanet: {\n        planet: string,\n        rel: string\n    }\n    avgTemp: number\n    axialTilt: number\n    density: number\n    dimension: string\n    discoveredBy: string\n    discoveryDate: string\n    eccentricity: number\n    englishName: string\n    equaRadius: number\n    escape: number\n    flattening: number\n    gravity: number\n    id: string\n    inclination: number\n    isPlanet: false\n    longAscNode: number\n    mainAnomaly: number\n    mass: { massValue: number, massExponent: number }\n    meanRadius: number\n    moons: any | null\n    name?: string\n    perihelion: number\n    polarRadius: number\n    rel: string\n    semimajorAxis: number\n    sideralOrbit: number\n    sideralRotation: number\n    vol: any | null\n}\n\nexport interface BodyApiResponse {\n    bodies: Body[]\n}\n\nexport interface BodyOption {\n    label: string\n    value: number\n}\n\nexport interface CleanEnglishLexicon {\n    id: string\n    name: string\n}\n\nexport type PlanetsDataframe = Body[]\n\n\nexport interface PlanetFormData {\n    englishName: string,\n    moons: string[],\n    perihelion: number,\n    aphelion: number,\n    mass: number,\n    density: number,\n    gravity: number,\n    escape: number,\n    meanRadius: number,\n    discoveredBy: string[],\n    discoveryDate: Date\n    \n}","import axios, { AxiosResponse } from \"axios\"\nimport { stringify } from \"querystring\"\nimport { Body, BodyApiResponse, LOCALSTORAGE_KEY } from \"../types\"\n\n\n\n\n\nexport class ApiService {\n    private baseUrl = \"https://api.le-systeme-solaire.net/rest.php\"\n\n\n    get = async<T extends unknown> (url: string, queryParams: Record<string, string>): Promise<AxiosResponse<T>> => {\n        const urlWithParams = `${url}?${stringify(queryParams)}`\n        console.log(`GET ${url}`)\n        return axios.get(urlWithParams)\n    }\n\n    getOrCached = async (localStorageKey: LOCALSTORAGE_KEY, url: string, queryParams: Record<string, string>): Promise<Body[]> => {\n        const localString = localStorage.getItem(localStorageKey)\n        if (localString) {\n            const localResults = JSON.parse(localString) as Body[]\n            console.log(`using local copy of ${localStorageKey}`)\n            return new Promise((resolve, reject) => {\n                resolve(localResults)\n            })\n        } else {\n            console.log(`Local copy not found. Fetching ${localStorageKey} from API`)\n            const results = await this.get<BodyApiResponse>(url, queryParams)\n            localStorage.setItem(localStorageKey, JSON.stringify(results.data.bodies))\n            console.log(`Saved ${localStorageKey} to localStorage`)\n            return new Promise<Body[]>((resolve, reject) => {\n                resolve(results.data.bodies)\n            })\n\n        }\n\n    }\n    \n    fetchPlanets = async (excludedAttributes: string[]): Promise<Body[]> =>{\n        const url = `${this.baseUrl}/bodies`\n        const queryParams = {\n            filter: \"isPlanet,eq,true\",\n            exclude: excludedAttributes.join(\",\")\n        }\n        return this.getOrCached(LOCALSTORAGE_KEY.API_PLANETS, url, queryParams)\n    }\n\n    fetchEnglishNames = async () => {\n        const url = `${this.baseUrl}/bodies`\n        const queryParams = {\n            data: \"id,englishName\"\n        }\n        return this.getOrCached(LOCALSTORAGE_KEY.API_ENGLISH_NAMES, url, queryParams)\n    }\n}\n\nconst api = new ApiService()\nexport default api","\n\n\nexport enum AttrType {\n    STRING = \"string\",\n    NUMBERIC = \"numeric\",\n    DATE = \"date\",\n    LIST = \"list\" \n}\n\ninterface Attr {\n    attribute: string // the attribute name in the web service and the input dictionary\n    columnName: string // the corresponding column name in the dataframe after processing\n    type: AttrType\n    weight: number\n}\n\nexport const attrMap: Attr[] = [\n    {\n        attribute: \"englishName\",\n        columnName: \"englishName\",\n        type: AttrType.STRING,\n        weight: 0.2\n    },\n    {\n        attribute: \"moons\",\n        columnName: \"moonsEnglishName\",\n        type: AttrType.LIST,\n        weight: 0.15\n    },\n    {\n        attribute: \"perihelion\",\n        columnName: \"perihelion\",\n        type: AttrType.NUMBERIC,\n        weight: 0.05\n    },\n    {\n        attribute: \"aphelion\",\n        columnName: \"aphelion\",\n        type: AttrType.NUMBERIC,\n        weight: 0.05\n        },\n    {\n        attribute: \"mass\",\n        columnName: \"mass\",\n        // Expected as a numeric value in the dictionary input.\n        // It uses a value and exponent notation in the dataframe\n        type: AttrType.NUMBERIC,\n        weight: 0.05\n    }\n]","import { Body, CleanEnglishLexicon, LOCALSTORAGE_KEY, PlanetFormData, PlanetsDataframe } from \"../types\"\nimport api from \"./api-service\"\nimport { attrMap } from \"./attribute-map\"\n\n\n\ntype AttrType = \"string\" | \"numeric\" | \"date\" | \"list\" \n\ninterface Attr {\n    attribute: string // the attribute name in the web service and the input dictionary\n    columnName: string // the corresponding column name in the dataframe after processing\n    type: AttrType\n    weight: number\n}\n\n\nexport class BodyService {\n\n    ALL_ATTRIBUTES =   ['id', 'name', 'englishName', 'isPlanet', 'moons', 'semimajorAxis', \n      'perihelion', 'aphelion', 'eccentricity', 'inclination', 'density', \n      'gravity', 'escape', 'meanRadius', 'equaRadius', 'polarRadius', \n      'flattening', 'dimension', 'sideralOrbit', 'sideralRotation', \n      'aroundPlanet', 'discoveredBy', 'discoveryDate', 'alternativeName', \n      'axialTilt', 'mass', 'vol', 'rel']\n    \n    \n    \n    findClosestObject = async (planet: PlanetFormData): Promise<Body> => {\n        const df = await this.getDataframe()\n\n        // TODO Just returning some random object for now\n        const index = this.getRandomInt(0, df.length - 1)\n        return new Promise((resolve, reject) => resolve(df[index]))\n    }\n\n    comuteSimilarity = () => {\n        \n    }\n    getDataframe = async (): Promise<PlanetsDataframe> => {\n        let df: Promise<PlanetsDataframe>\n        const str = localStorage.getItem(LOCALSTORAGE_KEY.CLEANED_DF)\n        if (!!str) {\n            // TODO Add error handling if JSON fails parse\n            const data = JSON.parse(str)\n            df = new Promise((resolve, reject) => resolve(data))\n        } else {\n            df = this.buildDataframe()\n        }\n        return df\n    }\n\n    buildExcludedAttributes = (): string[] => {\n        const gameAttrs = attrMap.map(v => v.attribute)\n        gameAttrs.concat([\"id\", \"rel\"])\n\n        // Create a list of attrs to exclude by filter out game attrs from all attrs\n        const excludedAttrs = this.ALL_ATTRIBUTES.filter(attr => gameAttrs.indexOf(attr) < 0)\n\n        return excludedAttrs\n    }\n\n    buildDataframe = async(): Promise<PlanetsDataframe> => {\n        const excludedAttributes = this.buildExcludedAttributes()\n        const rawEnglishNames = api.fetchPlanets(excludedAttributes)\n        \n        const englishLexicon = await this.buildCleanEnglishLexicon()\n        \n        let df = await api.fetchPlanets(excludedAttributes)\n        df = this.cleanMoons(df, englishLexicon)\n        df = this.cleanAllFields(df)\n        console.log(`Save ${LOCALSTORAGE_KEY.CLEANED_DF} to localStorage`)\n        localStorage.setItem(LOCALSTORAGE_KEY.CLEANED_DF, JSON.stringify(df))\n        return df\n    }\n\n\n    cleanAllFields = (df: Body[]): Body[] => {\n        console.warn(\"NOT IMPLEMENTED\")\n        return df\n    }\n\n    cleanMoons = (df: Body[], englishLexicon: CleanEnglishLexicon[]): Body[] => {\n        console.warn(\"NOT IMPLEMENTED\")\n        return df\n    }\n\n    buildCleanEnglishLexicon = async (): Promise<CleanEnglishLexicon[]> => {\n        const rawNames = await api.fetchEnglishNames()\n        const cleanedNames = rawNames.map(raw => { return { id: raw.id, name: this.cleanName(raw) } })\n        return cleanedNames\n    } \n\n\n    cleanName = (rawEnglishName: Body): string => {\n        const re = /^(\\(\\d*\\)|\\d*)\\s*/\n        const str = (rawEnglishName.name ?? rawEnglishName.id)\n        const cleanedName = str.replace(re, \"\")\n        console.log(`Converted ${str} to ${cleanedName}`)\n        return cleanedName\n    }\n    \n    getRandomInt = (min: number, max: number): number => {\n        min = Math.ceil(min)\n        max = Math.floor(max)\n        \n        //The maximum is exclusive and the minimum is inclusive\n        return Math.floor(Math.random() * (max - min) + min) \n    }\n}\n\nconst bodyService = new BodyService()\nexport default bodyService","import { createTheme } from '@mui/material';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Container from '@mui/material/Container';\nimport Grid from '@mui/material/Grid';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport { ThemeProvider } from '@mui/private-theming';\nimport { FC, useEffect, useState } from \"react\";\nimport api from \"../../services/api-service\";\nimport bodyService from '../../services/body.service';\nimport { Body, BodyOption, PlanetFormData } from '../../types';\n\nconst theme = createTheme()\n\nconst Home: FC = () => {\n    const [planets, setplanets] = useState<Body[]>()\n    const [planetOptions, setPlanetOptions] = useState<BodyOption[]>([])\n    const [closestMatch, setClosestMatch] = useState<Body | null>(null)\n    \n    useEffect(() => {\n        const getData = async () => {\n            let subscribe = true\n            const results = await api.fetchPlanets([])\n            const englishNames = await api.fetchEnglishNames()\n            bodyService.buildDataframe()\n            if (subscribe) {\n                setplanets(results)\n                const planetOptions: BodyOption[] = results.map((p, i) => { return { label: p.englishName, value: i } })\n                setPlanetOptions(planetOptions)\n            }\n            subscribe = false\n        }\n        getData()\n    }, [setplanets])\n\n    const samplePlanet: PlanetFormData = {\n        \"englishName\": \"Plut\",\n        \"moons\": [\"Europa\", \"Io\"],\n        \"perihelion\": 0,\n        \"aphelion\": 0,\n        \"mass\": 0,\n        \"density\": 0,\n        \"gravity\": 0,\n        \"escape\": 0,\n        \"meanRadius\": 0,\n        \"discoveredBy\": [\"ombaugh\"],\n        \"discoveryDate\": new Date(2030, 1, 30)\n        }\n    \n    \n    \n    const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault()\n        const data = new FormData(event.currentTarget)\n        debugger\n        console.log(data)\n        const closestPlanet = await bodyService.findClosestObject(samplePlanet)\n        setClosestMatch(closestPlanet)\n    }\n    \n    return (\n        <ThemeProvider theme={theme}>\n        <Container component=\"main\" maxWidth=\"md\">\n            <Typography component=\"h1\" variant=\"h5\">\n                Find Closest Planet    \n            </Typography>\n            <Box component=\"form\" noValidate onSubmit={handleSubmit} sx={{ mt: 3 }}>\n                    <Grid container spacing={2}>\n                    <Grid item xs={12} sm={6}>\n                        <TextField\n                            name=\"englishName\"\n                            fullWidth\n                            id=\"englishName\"\n                            label=\"English Name\"\n                        />\n                        <TextField\n                            fullWidth\n                            id=\"moons\"\n                            label=\"Moons (commas separated)\"\n                            name=\"moons\"\n                        />\n                        <TextField\n                            fullWidth\n                            id=\"perihelion\"\n                            label=\"Perihelion\"\n                            name=\"perihelion\"\n                        />\n                        <TextField\n                            fullWidth\n                            id=\"apelion\"\n                            label=\"Apelion\"\n                            name=\"apelion\"\n                        />\n                        <TextField\n                            fullWidth\n                            id=\"mass\"\n                            label=\"Mass (kg)\"\n                            name=\"mass\"\n                        />\n                        <TextField\n                            fullWidth\n                            id=\"density\"\n                            label=\"Density (kg/m^3)\"\n                            name=\"density\"\n                        />\n                        <TextField\n                            fullWidth\n                            id=\"gravity\"\n                            label=\"Gravity\"\n                            name=\"gravity\"\n                        />\n                    </Grid>\n                    \n                    <Button\n                        type=\"submit\"\n                        fullWidth\n                        variant=\"contained\"\n                        sx={{ mt: 3, mb: 2 }}\n                        >\n                        Search\n                    </Button>\n                    <Grid item xs={12} sm={6}>\n                        {JSON.stringify(closestMatch)}\n                    </Grid>\n                </Grid>\n            </Box>\n\n            </Container>\n        </ThemeProvider>\n    )\n}\n\nexport default Home","import React, { FC } from \"react\";\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\nimport './App.css';\nimport Home from \"./components/home/Home\";\n\nconst Root = () => {\n    return (\n        \n        <Routes>\n          <Route path=\"/\" element={  <Home/>} />\n        </Routes>\n  )\n}\n\n\nconst  App: FC = () => {\n  return (\n    <div className=\"App\">\n      <BrowserRouter basename=\"solar/\">\n        <Root />\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}